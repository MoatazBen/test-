pipeline {
    agent any

    stages {
        stage('Clone du projet') {
            steps {
                echo 'Clonage du projet...'
                git 'https://github.com/votre-repository.git' // Remplacez par l'URL de votre dépôt
            }
        }
        stage('Analyse SonarQube') {
            steps {
                echo 'Analyse avec SonarQube...'
                withSonarQubeEnv('SonarQube') { // Assurez-vous que SonarQube est configuré dans Jenkins
                    sh 'mvn sonar:sonar'
                }
            }
        }
        stage('Build') {
            steps {
                echo 'Compilation du projet...'
                sh 'mvn clean package' // Remplacez par la commande de build appropriée
            }
        }
        stage('Créer une image Docker') {
            steps {
                echo 'Création de l\'image Docker...'
                sh 'docker build -t votre-image:latest .'
            }
        }
        stage('Push Docker image to DockerHub') {
            steps {
                echo 'Push de l\'image sur DockerHub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS'
                    sh 'docker tag votre-image:latest votre-repo/votre-image:latest'
                    sh 'docker push votre-repo/votre-image:latest'
                }
            }
        }
        stage('Deploy and Start Docker Container') {
            steps {
                echo 'Déploiement et démarrage du conteneur...'
                sh 'docker run -d -p 8080:8080 votre-repo/votre-image:latest'
            }
        }
    }

    post {
        always {
            echo 'Pipeline terminée.'
        }
        success {
            echo 'Pipeline exécutée avec succès.'
        }
        failure {
            echo 'Pipeline échouée.'
        }
    }
}
